AGENT = data('cpu.utilization', filter=(not filter('aws_instance_id', '*')) and (not filter('gcp_id', '*')) and (not filter('azure_vm_id', '*'))).mean(over='1h').count().publish(label='AGENT', enable=False)
AWSVM = data('CPUUtilization', filter=filter('namespace', 'AWS/EC2') and filter('stat', 'mean') and filter('aws_instance_id', '*')).mean(over='1h').count().publish(label='AWSVM', enable=False)
AZVM = data('Percentage CPU', filter=filter('primary_aggregation_type', 'true') and filter('azure_vm_id', '*')).mean(over='1h').count().publish(label='AZVM', enable=False)
GCPVM = data('instance/uptime', filter=filter('gcp_id', '*')).mean(over='1h').count().publish(label='GCPVM', enable=False)
ELB = data('HealthyHostCount', filter=filter('namespace', 'AWS/ELB') and filter('stat', 'sum') and (not filter('AvailabilityZone', '*')) and filter('LoadBalancerName', '*')).mean(over='1h').count().publish(label='ELB', enable=False)
ALB = data('RequestCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'mean') and (not filter('TargetGroup', '*')) and (not filter('AvailabilityZone', '*')) and filter('LoadBalancer', '*')).mean(over='1h').count().publish(label='ALB', enable=False)
NLB = data('ConsumedLCUs', filter=filter('stat', 'mean') and filter('namespace', 'AWS/NetworkELB')).mean(over='1h').count().publish(label='NLB', enable=False)
RDS = data('CPUUtilization', filter=filter('stat', 'mean') and filter('namespace', 'AWS/RDS') and filter('DBInstanceIdentifier', '*')).mean(over='1h').count().publish(label='RDS', enable=False)
RDSC = data('CPUUtilization', filter=filter('stat', 'mean') and filter('namespace', 'AWS/RDS') and filter('DBClusterIdentifier', '*') and (not filter('DBInstanceIdentifier', '*')) and (not filter('Role', '*'))).mean(over='1h').count().publish(label='RDSC', enable=False)
ELC = data('CPUUtilization', filter=filter('stat', 'mean') and filter('namespace', 'AWS/ElastiCache') and (not filter('CacheNodeId', '*'))).mean(over='1h').count().publish(label='ELC', enable=False)
ELS = data('ClusterStatus.yellow', filter=filter('namespace', 'AWS/ES') and filter('stat', 'mean')).mean(over='1h').count().publish(label='ELS', enable=False)
HOSTS = (AGENT+GCPVM+AZVM+AWSVM+ELB+ALB+NLB+ELC+RDS+RDSC+ELS)${aggregation}.publish(label='HOSTS', enable=${publish["HOSTS"]})
MTS = data('sf.org.numCustomMetrics')${aggregation}.publish(label='MTS', enable=${publish["MTS"]})
